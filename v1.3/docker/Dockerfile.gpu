# Data Science Development Environment - GPU Version
# Version: 1.3
# Maintainer: bhumukulraj.ds@gmail.com

# Stage 1: Builder
FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04 as builder

# Add build arguments for UID/GID
ARG NB_UID=1000
ARG NB_GID=1000
ARG NB_USER=ds-user-ds
ARG CONDA_DIR=/opt/conda

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    CONDA_DIR=${CONDA_DIR} \
    PATH=${CONDA_DIR}/bin:$PATH \
    SHELL=/bin/bash \
    DS_VERSION=1.3 \
    DS_MAINTAINER="bhumukulraj.ds@gmail.com" \
    NB_USER=${NB_USER} \
    NB_UID=${NB_UID} \
    NB_GID=${NB_GID}

# Create app directory
WORKDIR /app

# Install system dependencies with retries
RUN apt-get update && \
    for i in {1..3}; do \
        apt-get install -y --no-install-recommends \
        wget \
        bzip2 \
        ca-certificates \
        git \
        git-lfs \
        curl \
        libarchive-dev && break || \
        if [ $i -lt 3 ]; then sleep 15; apt-get update; else exit 1; fi; \
    done && \
    rm -rf /var/lib/apt/lists/*

# Copy environment file
COPY environments/environment-gpu.yml ./

# Create GPU environment with mamba in stages
RUN --mount=type=cache,target=/root/.cache/pip \
    # Download and install miniconda
    wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py39_23.11.0-2-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p ${CONDA_DIR} && \
    rm ~/miniconda.sh && \
    ${CONDA_DIR}/bin/conda init bash && \
    . ${CONDA_DIR}/etc/profile.d/conda.sh && \
    # Install mamba
    for i in {1..3}; do \
        ${CONDA_DIR}/bin/conda install -n base -c conda-forge -y mamba 'conda-libmamba-solver>=23.11.0' && break || sleep 15; \
    done && \
    ${CONDA_DIR}/bin/conda config --set solver libmamba && \
    ${CONDA_DIR}/bin/conda install -n base -c conda-forge -y notebook && \
    ${CONDA_DIR}/bin/conda config --system --set auto_update_conda false && \
    ${CONDA_DIR}/bin/conda config --system --set channel_priority flexible && \
    ${CONDA_DIR}/bin/conda config --append channels conda-forge && \
    # Create base environment from yml
    ${CONDA_DIR}/bin/mamba env create -f environment-gpu.yml && \
    . ${CONDA_DIR}/etc/profile.d/conda.sh && \
    conda activate ds-gpu && \
    # Build JupyterLab with all extensions
    jupyter lab build --minimize=False --dev-build=False && \
    # Clean up
    ${CONDA_DIR}/bin/mamba clean -afy && \
    npm cache clean --force && \
    rm -rf /home/${NB_USER}/.cache/yarn && \
    find ${CONDA_DIR}/ -type f,l -name '*.a' -delete && \
    find ${CONDA_DIR}/ -type f,l -name '*.js.map' -delete && \
    find ${CONDA_DIR}/ -type f,l -name '*.pyc' -delete

# Stage 2: Final image
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Add build arguments for UID/GID
ARG NB_UID=1000
ARG NB_GID=1000
ARG NB_USER=ds-user-ds
ARG CONDA_DIR=/opt/conda

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    CONDA_DIR=${CONDA_DIR} \
    PATH=${CONDA_DIR}/bin:$PATH \
    HOME=/home/${NB_USER} \
    SHELL=/bin/bash \
    NB_USER=${NB_USER} \
    NB_UID=${NB_UID} \
    NB_GID=${NB_GID}

# Install system dependencies and create user with retries
RUN for i in {1..3}; do \
        apt-get update && \
        apt-get install -y --no-install-recommends \
        curl \
        openssh-client \
        libopenblas-dev && break || \
        if [ $i -lt 3 ]; then sleep 15; else exit 1; fi; \
    done && \
    rm -rf /var/lib/apt/lists/* && \
    echo "Creating group ${NB_USER} with GID ${NB_GID}" && \
    groupadd -g "${NB_GID}" -o "${NB_USER}" && \
    echo "Creating user ${NB_USER} with UID ${NB_UID}" && \
    useradd -m -s /bin/bash -N -u "${NB_UID}" -g "${NB_GID}" "${NB_USER}" && \
    mkdir -p "${CONDA_DIR}" && \
    chown -R "${NB_USER}:${NB_USER}" "${CONDA_DIR}" && \
    mkdir -p /workspace && \
    chown -R "${NB_USER}:${NB_USER}" /workspace

# Copy conda environments from builder
COPY --from=builder --chown=$NB_USER:$NB_USER $CONDA_DIR $CONDA_DIR

# Copy and set up entrypoint
WORKDIR /usr/local/bin
COPY scripts/docker-entrypoint.sh ./
RUN chmod +x ./docker-entrypoint.sh

# Switch to non-root user and set home directory
USER $NB_USER
WORKDIR $HOME

# Initialize conda for the user
SHELL ["/bin/bash", "--login", "-c"]
RUN conda init bash && \
    echo "conda activate ds-gpu" >> ~/.bashrc

# Set workspace as final working directory
WORKDIR /workspace

# Expose ports
EXPOSE 8888

# Reset shell to default
SHELL ["/bin/bash", "-c"]

# Set default command
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["jupyter", "lab"]

# Add labels
LABEL maintainer="bhumukulraj.ds@gmail.com" \
      version="1.3" \
      description="Data Science Development Environment - GPU Version" \
      org.opencontainers.image.source="https://github.com/yourusername/ds-docker-project" \
      nvidia.cuda.version="11.8.0" \
      nvidia.cudnn.version="8" \
      nvidia.require.cuda=">=11.8" 